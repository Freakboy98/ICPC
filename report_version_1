<p>#<strong>ICPC</strong><br>
<strong>Tiltle : get a prime algorithm</strong><br>
<strong>Nmae</strong> : Kim min sang<br>
<strong>Major</strong>: Financeial mathmathics<br>
<strong>number</strong> : 202037010</p>
<hr>
<p>##<strong>version 1</strong></p>
<pre><code>+#include &lt;stdio.h&gt;
int main(void)
{
	int i,n;
	unsigned long counter = 0;
	1.for(n=2;n&lt;=1000;n++)
	{
		2.for(i=2;i&lt;n;i++)
		{
			3.counter++;
			4.if(n%i==0)
			{
				break;
			}
		}
		5.if(n == i)
		{
			printf(&quot;%d\n&quot;,n);
		}
	}
	printf(&quot;나눗셈 실행횟수 : %d\n&quot;,counter);
	return 0;
}
</code></pre>
<hr>
<p>##<strong>progress</strong><br>
&lt;img src=&quot;chapter2/prime version 1/version1%20jpg.png&quot; width=&quot;70%&quot; height=&quot;70%&quot;&gt;</p>
<hr>
<p>##<strong>Result</strong>
&lt;img src=&quot;chapter2/prime version 1/result.png&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;</p>
<hr>
<p>##<strong>coment</strong><br>
This algorithm is simple, but take many times. so inefficient.<br>
If we think that prime occurs in odd number set, it more efficient.</p>
